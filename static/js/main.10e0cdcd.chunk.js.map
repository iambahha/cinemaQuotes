{"version":3,"sources":["Components/UI/Navigation/Navigation.js","constants.js","Components/UI/Button/Button.js","Components/QuoteForm/QuoteForm.js","Components/UI/Spinner/Spinner.js","Containers/AddQuote/AddQuote.js","Components/Quote/Quote.js","Components/Categories/Categories.js","Containers/QuotesList/QuotesList.js","Containers/EditQuote/EditQuote.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","className","exact","to","categories","id","title","Button","classNames","children","type","color","onClick","join","QuoteForm","selectValue","inputChange","inputValue","contentValue","submit","option","constants","map","category","key","value","Form","onSubmit","FormGroup","Label","htmlFor","Input","onChange","name","Spinner","AddQuote","state","quote","author","content","loading","AddPostHandler","event","a","async","preventDefault","setState","axios","post","props","history","push","inputChangeHandler","persist","prevState","stateCopy","target","this","form","Component","Quote","edit","remove","Card","body","inverse","CardHeader","CardBody","CardTitle","CardText","Categories","QuotesList","quotes","_getAllPosts","url","match","params","get","response","data","Object","keys","addQuote","quoteDeleteHandler","delete","copyQuote","index","findIndex","splice","quoteEditHandler","prevProps","snapshot","allQuotes","length","EditQuote","put","App","path","component","Boolean","window","location","hostname","defaults","baseURL","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.10e0cdcd.chunk.js","sourcesContent":["import React from 'react';\nimport {NavLink} from \"react-router-dom\";\n\nconst Navigation = () => {\n\treturn (\n\t\t<div className=\"navbar navbar-dark bg-info navbar-expand-lg\">\n\t\t\t<div className=\"navbar-brand container\">\n\t\t\t\t<ul className=\"navbar-nav\">\n\t\t\t\t\t<li className=\"nav-item\">\n\t\t\t\t\t\t<NavLink exact className=\"nav-link\" to=\"/cinemaQuotes/\">Quotes<span\n\t\t\t\t\t\t\tclassName=\"sr-only\">(current)</span></NavLink>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li className=\"nav-item\">\n\t\t\t\t\t\t<NavLink className=\"nav-link\" to=\"/cinemaQuotes/quotes/add\">Submit New Quote</NavLink>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Navigation;","export default {\n    categories : [\n        {id : 'star-wars', title : 'Star Wars'},\n        {id : 'lord-of-the-rings', title : 'Lord of the Rings'},\n        {id : 'avengers', title : 'Avengers'},\n        {id : 'motivational', title : 'Motivational'},\n        {id : 'harry-potter', title : 'Harry Potter'},\n    ]\n}","import React from 'react';\n\nconst Button = ({classNames, children, type, color, onClick}) => {\n\treturn (\n\t\t<button onClick={onClick} type={type} className={['btn', 'btn-' + color, classNames].join(' ')}>\n\t\t\t{children}\n\t\t</button>\n\t);\n};\n\nexport default Button;","import React from 'react';\nimport constants from \"../../constants\";\nimport {Form, FormGroup, Input, Label} from \"reactstrap\";\nimport Button from \"../UI/Button/Button\";\n\n\nconst QuoteForm = ({selectValue, inputChange, inputValue, contentValue, submit}) => {\n\tlet option = constants.categories.map(category => {\n\t\treturn (\n\t\t\t<option key={category.id} value={category.id}>\n\t\t\t\t{category.title}\n\t\t\t</option>\n\t\t)\n\t});\n\treturn (\n\t\t<Form onSubmit={submit}>\n\t\t\t<FormGroup>\n\t\t\t\t<Label htmlFor=\"category\">Category</Label>\n\t\t\t\t<Input type=\"select\" onChange={inputChange} name=\"category\" value={selectValue}>\n\t\t\t\t\t{option}\n\t\t\t\t</Input>\n\t\t\t</FormGroup>\n\t\t\t<FormGroup>\n\t\t\t\t<Label htmlFor=\"author\">Author</Label>\n\t\t\t\t<Input value={inputValue} name=\"author\" onChange={inputChange} type=\"text\" className=\"form-control\"/>\n\t\t\t</FormGroup>\n\t\t\t<FormGroup>\n\t\t\t\t<Label htmlFor=\"content\">Quote</Label>\n\t\t\t\t<textarea value={contentValue} name=\"content\" onChange={inputChange} className=\"form-control\"/>\n\t\t\t</FormGroup>\n\t\t\t<Button type=\"submit\" color=\"info\">Add</Button>\n\t\t</Form>\n\t)\n};\n\nexport default QuoteForm;","import React from 'react';\n\nimport './Spinner.css';\n\nconst Spinner = () => {\n\treturn (\n\t\t<div className=\"Spinner\">Loading...</div>\n\t);\n};\n\nexport default Spinner;\n","import React, {Component} from 'react';\nimport axios from 'axios';\nimport constants from \"../../constants\";\nimport QuoteForm from \"../../Components/QuoteForm/QuoteForm\";\nimport Spinner from \"../../Components/UI/Spinner/Spinner\";\n\nclass AddQuote extends Component {\n\tstate = {\n\t\tquote: {\n\t\t\tcategory: constants.categories[0].id,\n\t\t\tauthor: '',\n\t\t\tcontent: ''\n\t\t},\n\t\tloading: false,\n\t};\n\tAddPostHandler = async (event) => {\n\t\tevent.preventDefault();\n\t\tthis.setState({loading: true});\n\t\tawait axios.post('/quotes.json', this.state.quote);\n\t\tthis.setState({loading: false});\n\t\tthis.props.history.push('/cinemaQuotes/');\n\t};\n\tinputChangeHandler = event => {\n\t\tevent.persist();\n\t\tthis.setState(prevState => {\n\t\t\tconst stateCopy = {...prevState.quote};\n\t\t\tstateCopy[event.target.name] = event.target.value;\n\t\t\treturn {quote: stateCopy};\n\t\t})\n\t};\n\n\trender() {\n\t\tconst state = this.state.quote;\n\t\tlet form = <QuoteForm\n\t\t\tsubmit={this.AddPostHandler}\n\t\t\tselectValue={state.category}\n\t\t\tcontentValue={state.content}\n\t\t\tinputValue={state.author}\n\t\t\tinputChange={this.inputChangeHandler}/>;\n\t\tif (this.state.loading) {\n\t\t\tform = <Spinner/>;\n\t\t}\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{form}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default AddQuote;","import React from 'react';\nimport Button from \"../UI/Button/Button\";\nimport {Card, CardBody, CardHeader, CardText, CardTitle} from \"reactstrap\";\nimport './Quote.css'\n\nconst Quote = ({author, content, edit, remove}) => {\n\treturn (\n\t\t<Card body inverse color=\"info\" className=\"quote-block\">\n\t\t\t<CardHeader>Quote</CardHeader>\n\t\t\t<CardBody>\n\t\t\t\t<CardTitle>{author}:</CardTitle>\n\t\t\t\t<CardText>{content}</CardText>\n\t\t\t\t<Button onClick={edit} type=\"button\" color=\"secondary\">Edit</Button>\n\t\t\t\t<Button onClick={remove} type=\"button\" color=\"warning\">Delete</Button>\n\t\t\t</CardBody>\n\t\t</Card>\n\t);\n};\n\nexport default Quote;","import React from 'react';\nimport {NavLink} from \"react-router-dom\";\nimport constants from \"../../constants\";\nimport './Categories.css'\n\nconst Categories = () => {\n\treturn (\n\t\t<ul className=\"navs\">\n\t\t\t<li className=\"nav-item mr-5\">\n\t\t\t\t<NavLink to=\"/cinemaQuotes/\" exact>All</NavLink>\n\t\t\t</li>\n\t\t\t{constants.categories.map(category => {\n\t\t\t\treturn (\n\t\t\t\t\t<li key={category.id} className=\"nav-item mr-5\">\n\t\t\t\t\t\t<NavLink to={'/cinemaQuotes/quotes/' + category.id}>{category.title}</NavLink>\n\t\t\t\t\t</li>\n\t\t\t\t)\n\t\t\t})}\n\t\t</ul>\n\t);\n};\n\nexport default Categories;","import React, {Component} from 'react';\nimport axios from 'axios';\nimport Quote from \"../../Components/Quote/Quote\";\nimport Categories from \"../../Components/Categories/Categories\";\nimport Spinner from \"../../Components/UI/Spinner/Spinner\";\nimport Button from \"../../Components/UI/Button/Button\";\nimport './QuotesList.css'\n\nclass QuotesList extends Component {\n\tstate = {\n\t\tquotes: [],\n\t\tloading: true,\n\t\tcategory: null\n\t};\n\t_getAllPosts = async () => {\n\t\tlet url = '/quotes.json';\n\t\tlet category = this.props.match.params.category;\n\t\tif (category) {\n\t\t\turl += '?orderBy=\"category\"&equalTo=\"' + category + '\"';\n\t\t}\n\t\tconst response = await axios.get(url);\n\t\tif (response.data) {\n\t\t\tlet quotes = Object.keys(response.data).map(key => {\n\t\t\t\treturn {...response.data[key], id: key}\n\t\t\t});\n\t\t\tthis.setState({quotes, loading: false});\n\t\t} else {\n\t\t\tthis.setState({loading: false})\n\t\t}\n\t};\n\n\tasync componentDidMount() {\n\t\tthis._getAllPosts();\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState, snapshot) {\n\t\tif (this.props.match.params.category !== this.state.category) {\n\t\t\tthis.setState({category: this.props.match.params.category});\n\t\t\tthis._getAllPosts();\n\t\t}\n\t}\n\n\taddQuote = () => {\n\t\tthis.props.history.push('/cinemaQuotes/quotes/add');\n\t};\n\tquoteDeleteHandler = async id => {\n\t\tawait axios.delete(`/quotes/${id}.json`);\n\t\tlet copyQuote = [...this.state.quotes];\n\t\tlet index = copyQuote.findIndex(quote => id === quote.id);\n\t\tcopyQuote.splice(index, 1);\n\t\tthis.setState({quotes: copyQuote});\n\t};\n\tquoteEditHandler = id => {\n\t\tthis.props.history.push('/cinemaQuotes/quotes-edit/' + id);\n\t};\n\n\trender() {\n\t\tlet allQuotes = this.state.quotes.map(quote => {\n\t\t\treturn (\n\t\t\t\t<Quote remove={() => this.quoteDeleteHandler(quote.id)}\n\t\t\t\t\t\t\t edit={() => this.quoteEditHandler(quote.id)}\n\t\t\t\t\t\t\t key={quote.id} author={quote.author}\n\t\t\t\t\t\t\t content={quote.content}/>\n\t\t\t)\n\t\t});\n\t\tif (this.state.quotes.length === 0) {\n\t\t\tallQuotes =\n\t\t\t\t<Button onClick={this.addQuote} classNames=\"btn-add-quotes\" color=\"info\" type=\"button\">Add new quotes</Button>\n\t\t}\n\t\tif (this.state.loading) {\n\t\t\tallQuotes = <Spinner/>\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"container d-flex flex-wrap \">\n\t\t\t\t<div>\n\t\t\t\t\t<Categories/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"quotes-list\">\n\t\t\t\t\t{allQuotes}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default QuotesList;","import React, {Component} from 'react';\nimport axios from 'axios';\nimport constants from \"../../constants\";\nimport QuoteForm from \"../../Components/QuoteForm/QuoteForm\";\n\nclass EditQuote extends Component {\n\tstate = {\n\t\tquote: {\n\t\t\tcategory: constants.categories[0].id,\n\t\t\tauthor: '',\n\t\t\tcontent: ''\n\t\t}\n\t};\n\n\tasync componentDidMount() {\n\t\tlet id = this.props.match.params.id;\n\t\tlet response = await axios.get('/quotes/' + id + '.json');\n\t\tthis.setState({quote: response.data});\n\t}\n\n\tEditQuote = async (event) => {\n\t\tlet id = this.props.match.params.id;\n\t\tevent.preventDefault();\n\t\tawait axios.put('/quotes/' + id + '.json', this.state.quote);\n\t\tthis.props.history.push('/cinemaQuotes/');\n\t};\n\tinputChangeHandler = event => {\n\t\tevent.persist();\n\t\tthis.setState(prevState => {\n\t\t\tconst stateCopy = {...prevState.quote};\n\t\t\tstateCopy[event.target.name] = event.target.value;\n\t\t\treturn {quote: stateCopy};\n\t\t})\n\t};\n\n\trender() {\n\t\tconst state = this.state.quote;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<QuoteForm\n\t\t\t\t\tsubmit={this.EditQuote}\n\t\t\t\t\tselectValue={state.category}\n\t\t\t\t\tcontentValue={state.content}\n\t\t\t\t\tinputValue={state.author}\n\t\t\t\t\tinputChange={this.inputChangeHandler}/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default EditQuote;","import React from 'react';\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport Navigation from \"./Components/UI/Navigation/Navigation\";\nimport AddQuote from \"./Containers/AddQuote/AddQuote\";\nimport QuotesList from \"./Containers/QuotesList/QuotesList\";\nimport EditQuote from \"./Containers/EditQuote/EditQuote\";\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <BrowserRouter>\n          <Navigation />\n          <div className=\"container mt-5\">\n              <Switch >\n                  <Route path=\"/cinemaQuotes/\" exact component={QuotesList}/>\n                  <Route path=\"/cinemaQuotes/quotes/add\" component={AddQuote}/>\n                  <Route path=\"/cinemaQuotes/quotes-edit/:id\" component={EditQuote}/>\n                  <Route path=\"/cinemaQuotes/quotes/:category\" component={QuotesList}/>\n              </Switch>\n          </div>\n        </BrowserRouter>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://my-react-apps-6805c.firebaseio.com/';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}