{"version":3,"sources":["Components/UI/Navigation/Navigation.js","constants.js","Components/UI/Button/Button.js","Components/QuoteForm/QuoteForm.js","Components/UI/Spinner/Spinner.js","Containers/AddQuote/AddQuote.js","Components/Quote/Quote.js","Components/Categories/Categories.js","Containers/QuotesList/QuotesList.js","Containers/EditQuote/EditQuote.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","className","exact","to","categories","id","title","Button","classNames","children","type","color","onClick","join","QuoteForm","selectValue","inputChange","inputValue","contentValue","submit","option","constants","map","category","key","value","Form","onSubmit","FormGroup","Label","htmlFor","Input","onChange","name","Spinner","AddQuote","state","quote","author","content","loading","AddPostHandler","event","a","async","preventDefault","setState","axios","post","props","history","push","inputChangeHandler","persist","prevState","stateCopy","target","this","form","Component","Quote","edit","remove","Card","body","inverse","CardHeader","CardBody","CardTitle","CardText","Categories","QuotesList","quotes","_getAllPosts","url","match","params","get","response","data","Object","keys","console","log","addQuote","quoteDeleteHandler","delete","copyQuote","index","findIndex","splice","quoteEditHandler","prevProps","snapshot","allQuotes","length","EditQuote","put","App","path","component","Boolean","window","location","hostname","defaults","baseURL","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52c0ff25.chunk.js","sourcesContent":["import React from 'react';\nimport {NavLink} from \"react-router-dom\";\n\nconst Navigation = () => {\n    return (\n        <div className=\"navbar navbar-dark bg-info navbar-expand-lg\">\n            <div className=\"navbar-brand container\">\n                <ul className=\"navbar-nav\">\n                    <li className=\"nav-item\">\n                        <NavLink exact className=\"nav-link\" to=\"/\">Quotes<span className=\"sr-only\">(current)</span></NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" to=\"/quotes/add\">Submit New Quote</NavLink>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nexport default Navigation;","export default {\n    categories : [\n        {id : 'start-wars', title : 'Star Wars'},\n        {id : 'lord-of-the-rings', title : 'Lord of the Rings'},\n        {id : 'avengers', title : 'Avengers'},\n        {id : 'motivational', title : 'Motivational'},\n        {id : 'harry-potter', title : 'Harry Potter'},\n    ]\n}","import React from 'react';\n\nconst Button = ({classNames,children,type,color,onClick}) => {\n    return (\n        <button onClick={onClick} type={type} className={['btn','btn-'+ color, classNames].join(' ')}>\n            {children}\n        </button>\n    );\n};\n\nexport default Button;","import React from 'react';\nimport constants from \"../../constants\";\nimport {Form, FormGroup, Input, Label} from \"reactstrap\";\nimport Button from \"../UI/Button/Button\";\n\n\nconst QuoteForm = ({selectValue,inputChange,inputValue,contentValue,submit}) => {\n    let option = constants.categories.map(category => {\n       return (\n           <option key={category.id} value={category.id}>\n               {category.title}\n           </option>\n       )\n    });\n    return (\n        <Form onSubmit={submit}>\n            <FormGroup >\n              <Label htmlFor=\"category\">Category</Label>\n              <Input type=\"select\" onChange={inputChange} name=\"category\" value={selectValue}>\n                    {option}\n                </Input>\n            </FormGroup>\n            <FormGroup>\n                <Label htmlFor=\"author\">Author</Label>\n                <Input value={inputValue} name=\"author\" onChange={inputChange} type=\"text\" className=\"form-control\"/>\n            </FormGroup>\n            <FormGroup>\n                <Label htmlFor=\"content\">Quote</Label>\n                <textarea value={contentValue} name=\"content\" onChange={inputChange} className=\"form-control\"/>\n            </FormGroup>\n            <Button type=\"submit\" color=\"info\">Add</Button>\n        </Form>\n    )\n};\n\nexport default QuoteForm;","import React from 'react';\n\nimport './Spinner.css';\n\nconst Spinner = () => {\n  return (\n    <div className=\"Spinner\">Loading...</div>\n  );\n};\n\nexport default Spinner;\n","import React, {Component} from 'react';\nimport axios from 'axios';\nimport constants from \"../../constants\";\nimport QuoteForm from \"../../Components/QuoteForm/QuoteForm\";\nimport Spinner from \"../../Components/UI/Spinner/Spinner\";\n\nclass AddQuote extends Component {\n    state = {\n        quote: {\n            category: constants.categories[0].id,\n            author: '',\n            content: ''\n        },\n        loading: false,\n    };\n    AddPostHandler = async (event) => {\n        event.preventDefault();\n        this.setState({loading: true});\n        await axios.post('/quotes.json', this.state.quote);\n        this.setState({loading: false});\n        this.props.history.push('/');\n    };\n    inputChangeHandler = event => {\n        event.persist();\n        this.setState(prevState => {\n            const stateCopy = {...prevState.quote};\n            stateCopy[event.target.name] = event.target.value;\n            return {quote: stateCopy};\n        })\n    };\n\n    render() {\n        const state = this.state.quote;\n        let form = <QuoteForm\n            submit={this.AddPostHandler}\n            selectValue={state.category}\n            contentValue={state.content}\n            inputValue={state.author}\n            inputChange={this.inputChangeHandler}/>;\n        if(this.state.loading){\n            form = <Spinner/>;\n        }\n        return (\n            <div>\n                {form}\n            </div>\n        );\n    }\n}\n\nexport default AddQuote;","import React from 'react';\nimport Button from \"../UI/Button/Button\";\nimport {Card, CardBody, CardHeader, CardText, CardTitle} from \"reactstrap\";\nimport './Quote.css'\n\nconst Quote = ({author,content,edit,remove}) => {\n    return (\n        <Card body inverse color=\"info\" className=\"quote-block\">\n            <CardHeader>Quote</CardHeader>\n            <CardBody>\n                <CardTitle>{author}:</CardTitle>\n                <CardText>{content}</CardText>\n                <Button onClick={edit} type=\"button\" color=\"secondary\">Edit</Button>\n                <Button onClick={remove} type=\"button\" color=\"warning\">Delete</Button>\n            </CardBody>\n        </Card>\n    );\n};\n\nexport default Quote;","import React from 'react';\nimport {NavLink} from \"react-router-dom\";\nimport constants from \"../../constants\";\nimport './Categories.css'\n\nconst Categories = () => {\n    return (\n            <ul className=\"navs\">\n                <li className=\"nav-item mr-5\">\n                    <NavLink to=\"/\" exact>All</NavLink>\n                </li>\n                {constants.categories.map(category => {\n                    return (\n                        <li key={category.id} className=\"nav-item mr-5\">\n                            <NavLink to={'/quotes/' + category.id}>{category.title}</NavLink>\n                        </li>\n                    )\n                })}\n            </ul>\n    );\n};\n\nexport default Categories;","import React, {Component} from 'react';\nimport axios from 'axios';\nimport Quote from \"../../Components/Quote/Quote\";\nimport Categories from \"../../Components/Categories/Categories\";\nimport Spinner from \"../../Components/UI/Spinner/Spinner\";\nimport Button from \"../../Components/UI/Button/Button\";\nimport './QuotesList.css'\n\nclass QuotesList extends Component {\n    state = {\n        quotes: [],\n        loading : true,\n        category : null\n    };\n    _getAllPosts = async () => {\n        let url = '/quotes.json';\n        let category = this.props.match.params.category;\n        if(category){\n            url += '?orderBy=\"category\"&equalTo=\"'+ category +'\"';\n        }\n        const response = await axios.get(url);\n        if (response.data){\n            let quotes = Object.keys(response.data).map(key => {\n                console.log(response.data[key]);\n                return {...response.data[key], id: key}\n            });\n            this.setState({quotes,loading : false});\n        } else {\n            this.setState({loading : false})\n        }\n    };\n\n    async componentDidMount() {\n        this._getAllPosts();\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(this.props.match.params.category !== this.state.category){\n            this.setState({category : this.props.match.params.category});\n            this._getAllPosts();\n        }\n    }\n    addQuote = () => {\n        this.props.history.push('/quotes/add');\n    };\n    quoteDeleteHandler = async id => {\n        await axios.delete(`/quotes/${id}.json`);\n        let copyQuote = [...this.state.quotes];\n        let index = copyQuote.findIndex(quote => id === quote.id);\n        copyQuote.splice(index,1);\n        this.setState({quotes : copyQuote});\n    };\n    quoteEditHandler = id => {\n        this.props.history.push('/quotes-edit/' + id);\n    };\n\n    render() {\n        let allQuotes = this.state.quotes.map(quote => {\n            return (\n                <Quote remove={() => this.quoteDeleteHandler(quote.id)}\n                       edit={() => this.quoteEditHandler(quote.id)}\n                       key={quote.id} author={quote.author}\n                       content={quote.content}/>\n            )\n        });\n        if(this.state.quotes.length === 0){\n            allQuotes = <Button onClick={this.addQuote} classNames=\"btn-add-quotes\" color=\"info\" type=\"button\">Add new quotes</Button>\n        }\n        if(this.state.loading){\n            allQuotes = <Spinner/>\n        }\n        return (\n            <div className=\"container d-flex flex-wrap \">\n                <div>\n                    <Categories />\n                </div>\n                <div className=\"quotes-list\">\n                  {allQuotes}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default QuotesList;","import React, {Component} from 'react';\nimport axios from 'axios';\nimport constants from \"../../constants\";\nimport QuoteForm from \"../../Components/QuoteForm/QuoteForm\";\n\nclass EditQuote extends Component {\n    state = {\n        quote : {\n            category : constants.categories[0].id,\n            author : '',\n            content : ''\n        }\n    };\n    async componentDidMount() {\n        let id = this.props.match.params.id;\n       let response = await axios.get('/quotes/' + id + '.json');\n       this.setState({quote : response.data});\n    }\n\n    EditQuote = async (event) => {\n        let id = this.props.match.params.id;\n        event.preventDefault();\n        await axios.put('/quotes/' + id + '.json', this.state.quote);\n        this.props.history.push('/');\n    };\n    inputChangeHandler = event => {\n        event.persist();\n        this.setState(prevState => {\n            const stateCopy = {...prevState.quote};\n            stateCopy[event.target.name] = event.target.value;\n            return {quote : stateCopy};\n        })\n    };\n    render() {\n        const state = this.state.quote;\n        return (\n            <div>\n                <QuoteForm\n                    submit={this.EditQuote}\n                    selectValue={state.category}\n                    contentValue={state.content}\n                    inputValue={state.author}\n                    inputChange={this.inputChangeHandler}/>\n            </div>\n        );\n    }\n}\n\nexport default EditQuote;","import React from 'react';\nimport {BrowserRouter, Route, Switch,} from \"react-router-dom\";\nimport Navigation from \"./Components/UI/Navigation/Navigation\";\nimport AddQuote from \"./Containers/AddQuote/AddQuote\";\nimport QuotesList from \"./Containers/QuotesList/QuotesList\";\nimport EditQuote from \"./Containers/EditQuote/EditQuote\";\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <BrowserRouter>\n          <Navigation />\n          <div className=\"container mt-5\">\n              <Switch >\n                  <Route path=\"/\" exact component={QuotesList}/>\n                  <Route path=\"/quotes/add\" component={AddQuote}/>\n                  <Route path=\"/quotes-edit/:id\" component={EditQuote}/>\n                  <Route path=\"/quotes/:category\" component={QuotesList}/>\n              </Switch>\n          </div>\n        </BrowserRouter>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://my-react-apps-6805c.firebaseio.com/';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}